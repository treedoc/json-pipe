import { CliArgDeco, EnumValues, EnumsValueOf } from 'cli-arg-deco'
import { TD, TDJSONParser, TDJSONWriterOption, StringCharSource, TDEncodeOption, NodeFilter } from "treedoc"
import 'process';
import * as path from 'path';
import * as fs from 'fs';
// require = require("esm")(module/*, options*/)

// import { pipeline } from 'stream/promises'

// Following statement doesn't compile, not sure why
// import { pipeline } from 'stream/promises'
/* eslint-disable */
const { pipeline } = require('stream/promises');
import stream = require('stream');


export class JsonPipe {
  funcCache: Map<string, (_: any) => any> = new Map();

  constructor(
    public readonly context: any,
    public readonly input: stream.Readable,
    public readonly output: stream.Writable,
    public readonly parser: stream.Transform,
    public readonly transform: stream.Transform,
    public readonly aggregatedTransformer: Function,
    public readonly encoder: stream.Transform,
  ) {}
  
  async start() {
    const THIS = this;
    if (this.arg.fileType === FileType.JSON)
      await pipeline(
        this.input,
        this.parseJson.bind(THIS),  // Not sure why this is not bound for generator function
        this.output,
        // this.handleError,
      )
    else if (this.arg.fileType === FileType.LOG) {
      await pipeline(
        this.input,
        this.parseLines.bind(THIS),  // Not sure why this is not bound for generator function
        this.parseLog.bind(THIS),
        this.output,
        // this.handleError,
      )
    }
  }

  handleError(err: any) {
    if (err) {
      console.error('Pipeline failed.', err);
    } else {
      console.error('Pipeline succeeded.');
    }
  }

  async *parseJson(source: any) {
    source.setEncoding('utf8');
    let remain = '';
    for await (const chunk of source) {
      const src = new StringCharSource((remain + chunk).trim());
      let bookmark = src.getBookmark();
      while(src.skipSpacesAndReturnsAndCommas()) {
        try {
          // TODO: implement resumable partial parsing (Non-blocking parsing)
          const node = TDJSONParser.get().parse(src);
          bookmark = src.getBookmark();
          // console.log("node=" + node.toString());
          // console.log(JSON.stringify(node.toObject(false)));
          const obj = this.transformAndToString(node.toObject(false));
          if (obj) 
            yield obj;
        } catch (e) {
          console.error(e.name);
          console.error(e);
          break;
        } finally {
          remain = src.str.substring(bookmark.pos);
        }
      }
    }
    const o = this.aggregateAndToString(null);
    if (o)
      yield o;
  }

  // transfer chunks to lines
  async * parseLines(source: any) {
    source.setEncoding('utf8');
    let remain = '';
    for await (const chunk of source) {
      const src = new StringCharSource((remain + chunk));
      while(true) {
        const line = src.readUntilTerminator('\n\r');
        if (src.isEof()) {
          remain = line; 
          break;
        }
        src.skipChars('\n\r');
        if (line)
          yield line + "\n";
      }
    }
  }

  async * parseLog(source: any) {
    const regex = new RegExp(this.arg.logPattern);
    let logEntry: any = {additionalMessage: ''};
    let lines = 0;
    for await (let line of source) {
      if (this.arg.stripFileName) {
        const p = (line as string).indexOf(':');
        if (p >= 0)
          line = line.substr(p+1); 
      }
        
      const groups = regex.exec(line);
      if (groups != null || lines >= this.arg.maxLine) {
        const obj = this.transformAndToString(logEntry);
        if (obj)
          yield obj;
        logEntry = groups != null ? groups.groups : {};
        logEntry.additionalMessage = '';
        lines = 0;
      } else {
        logEntry.additionalMessage += line;
        lines ++;
      }
    }
    const o = this.aggregateAndToString(null);
    if (o)
      yield o;
  }

  transformAndToString(_: any) {
    if (!this.evalScript(this.arg.filter, _))
      return undefined;

    const obj = this.evalScript(this.arg.map, _);
    return obj ? this.aggregateAndToString(obj) : undefined;
  }

  aggregateAndToString(obj: any) {
    obj = this.evalScript(this.arg.aggregator, obj);
    return obj ? this.toString(obj) : undefined;
  }

  private toString(obj: any): string {
    return typeof(obj) === 'string' ? obj + "\n" : this.toJson(obj) + "\n";
  }

  evalScript(script: string, _: any): any {
    const cachedFunc = this.funcCache.get(script);
    if (cachedFunc)
      return cachedFunc(_);

    // console.log(`script=${script}`);
    let result: any = {}
    try {
      /* tslint-disable */
      result = eval(script);
    } catch (e: any) {
      // console.error("Error eval: " + e);
      script = script.indexOf(" return ") > 0  // Wrapper with a function
          ? `(function(){${script}})()` : `(${script})`;
      /* tslint-disable */
      result = eval(script);
    }
    // console.log(`typeof result=${typeof result}`);
    if (typeof result === 'function') {  // Cache the function, so the function could keep state in it's closure
      this.funcCache.set(script, result);
      result = result(_);
    }
    return result === true ? _ : result;
  }

  toJson(obj: any) {
    const codeOpt = new TDEncodeOption().setJsonOption(
      new TDJSONWriterOption()
          .addNodeFilter(NodeFilter.mask(...this.arg.maskFields))
          .setIndentFactor(this.arg.indentFactor));
    return TD.stringify(obj, codeOpt)
  }
}
